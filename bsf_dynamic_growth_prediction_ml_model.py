# -*- coding: utf-8 -*-
"""BSF Dynamic growth prediction ML Model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jairLC53B-BCbE9KjVO7W2XHC_vsXGv-
"""

# Importing necessary libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import r2_score

# Reading the dataset
biowaste_data = pd.read_csv("biowaste_data.csv")  #Upload the emperical dataset (This is just a dumy dataset which I have mentioned)

# Defining input features and output (Input & output can be varied based on emperical data and research need)
X = biowaste_data[['temperature', 'humidity', 'pH', 'substrate', 'oxygen']]
y1 = biowaste_data['larvae_conditions']
y2 = biowaste_data['high_value_products']
y3 = biowaste_data['treatment_time']

# Machine Learning Model
# Splitting the dataset into training and testing sets
X_train, X_test, y1_train, y1_test = train_test_split(X, y1, test_size=0.2, random_state=42)
_, _, y2_train, y2_test = train_test_split(X, y2, test_size=0.2, random_state=42)
_, _, y3_train, y3_test = train_test_split(X, y3, test_size=0.2, random_state=42)

# Initializing the algorithms
lr = LinearRegression()
dt = DecisionTreeRegressor(random_state=42)
rf = RandomForestRegressor(random_state=42)

# Fitting the models
lr.fit(X_train, y1_train)
dt.fit(X_train, y1_train)
rf.fit(X_train, y1_train)

# Making predictions
y1_pred_lr = lr.predict(X_test)
y1_pred_dt = dt.predict(X_test)
y1_pred_rf = rf.predict(X_test)

# Evaluating the models
print("R2 score for Linear Regression:", r2_score(y1_test, y1_pred_lr))
print("R2 score for Decision Tree:", r2_score(y1_test, y1_pred_dt))
print("R2 score for Random Forest:", r2_score(y1_test, y1_pred_rf))

# Predicting the quantity of high-value products
lr.fit(X_train, y2_train)
dt.fit(X_train, y2_train)
rf.fit(X_train, y2_train)

y2_pred_lr = lr.predict(X_test)
y2_pred_dt = dt.predict(X_test)
y2_pred_rf = rf.predict(X_test)

print("R2 score for Linear Regression:", r2_score(y2_test, y2_pred_lr))
print("R2 score for Decision Tree:", r2_score(y2_test, y2_pred_dt))
print("R2 score for Random Forest:", r2_score(y2_test, y2_pred_rf))

# Predicting the time required for waste treatment and production of high-value products
lr.fit(X_train, y3_train)
dt.fit(X_train, y3_train)
rf.fit(X_train, y3_train)

y3_pred_lr = lr.predict(X_test)
y3_pred_dt = dt.predict(X_test)
y3_pred_rf = rf.predict(X_test)

print("R2 score for Linear Regression:", r2_score(y3_test, y3_pred_lr))
print("R2 score for Decision Tree:", r2_score(y3_test, y3_pred_dt))
print("R2 score for Random Forest:", r2_score(y3_test, y3_pred_rf))

